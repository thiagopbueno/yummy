#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'optparse'

require_relative 'lib/delicious'

# Parse command line options

options = {:object => "posts", :tags => nil, :max => 5}

opt_parser = OptionParser.new do |opts|
  opts.banner =   "Usage: ./yummy [OPTIONS]"
  opts.separator  ""
  opts.separator  "OPTIONS"

  opts.on("-o", "--object (tags|posts|dates)", "Choose between list of 'tags', 'posts' or 'posts/dates'") do |d|
    options[:object] = d
  end

  opts.on("-t", "--tags tag1+tag2+...", "Set list of tags (separated by '+') for posts") do |d|
    options[:tags] = d
  end

  opts.on("-n", "--max MAX", "Set maximum number of tags/posts") do |d|
    options[:max] = d.to_i
  end

  opts.on("-s", "--start-date START_DATE", "Set start date for all API requests") do |d|
    options[:start] = Date.parse(d).strftime("%FT%TZ")
  end

  opts.on("-e", "--end-date END_DATE", "Set end date for all API requests") do |d|
    options[:end] = Date.parse(d).strftime("%FT%TZ")
  end

  opts.on("-h", "--help", "Display this information") do
    puts opt_parser
    exit 0
  end

  opts.separator  ""
  opts.separator  "** All dates must be provided in the format `YYYY-MM-DD'"
  opts.separator  ""
end
opt_parser.parse!

# puts ARGV[0]
# puts ARGV[1]

command = ARGV[0]

case command
when "backup"
  options[:object] = "backup"
when "dates"
  options[:object] = "dates"
when "tags"
  options[:object] = "tags"
when "posts"
  options[:object] = "posts"
else
  puts "yummy: don't know how to `#{command}'"
  exit -1
end


# Greet user
puts "Hello, Yummy! You're just looking delicious ..."
puts

# Load ACCESS_TOKEN
config = begin
  YAML.load(File.open("config.yml"))
rescue ArgumentError => e
  puts "Could not parse YAML: #{e.message}"
end

# Initialize DeliciousAPI wrapper
manager = DeliciousAPI.new(config['ACCESS_TOKEN'])

# Print results
if options[:object] == "tags"
  uri  = manager.get_tags_uri
  tags = manager.get_tags

  exit -1 if tags.nil?

  i = 1
  tags.each do |tag, count|
    puts "[#{i}]\tcount: #{count}\ttag: #{tag}" unless i > options[:max]
    i += 1
  end

  n = i < options[:max] ? i : options[:max]
  puts
  puts "Found (#{i-1}) tags. Shown only first (#{n})."
  puts "URL: #{uri}"
  puts

elsif options[:object] == "dates"
  uri   = manager.get_posts_dates_uri options[:tags]
  dates = manager.get_posts_dates options[:tags]

  exit -1 if dates.nil?

  i = 1
  dates.sort{|a, b| b <=> a}.each do |dt, count|
    puts "[#{i}]\tdate: #{dt}\tcount: #{count}" unless i > options[:max]
    i += 1
  end

  n = i < options[:max] ? i : options[:max]
  puts
  puts "Found (#{i-1}) post dates. Shown only first (#{n})."
  puts "URL: #{uri}"
  puts

elsif options[:object] == "posts"
  uri   = manager.get_posts_uri(options[:tags], options[:max], nil, options[:start], options[:end])
  posts = manager.get_posts(options[:tags], options[:max], nil, options[:start], options[:end])

  exit -1 if posts.nil?

  puts "User `#{posts["info"]["user"]}' has #{posts["info"]["total"]} posts." unless options[:tags]
  puts

  i = 1
  posts["posts"].each do |hash, post|
    desc = post["desc"]
    href = post["href"]
    tags = post["tags"]
    time = post["dt"]

    puts "[#{i}]\t\t#{desc}"
    puts "#{time[0, 10]}\thref: #{href}"
    puts "#{time[11..-1]}\ttags: #{tags}"
    puts

    i += 1
  end

  puts "Found (#{i-1}) posts for tag(s) `#{options[:tags]}'." if options[:tags]
  puts "URL: #{uri}"
  puts

elsif options[:object] == "backup"
  posts = manager.get_all_posts options[:tags]

  File.open("delicious-backup-#{Time.now.strftime("%F_%H-%M-%S")}.yml", "w") do |f|
    f.write(posts.to_yaml)
  end

  i = 1
  posts.each do |hash, post|
    desc = post["desc"]
    href = post["href"]
    tags = post["tags"]
    time = post["dt"]

    puts "[#{i}]\t\t#{desc}"
    puts "#{time[0, 10]}\thref: #{href}"
    puts "#{time[11..-1]}\ttags: #{tags}"
    puts

    i += 1
  end

  puts "Found (#{i-1}) posts."
  puts
end