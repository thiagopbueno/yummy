#!/usr/bin/env ruby

require 'rubygems'
require 'yaml'
require 'optparse'

require_relative 'lib/delicious'
require_relative 'lib/services/manager'

# Parse command line options
options = {:object => "posts", :tags => nil, :max => 10}

opt_parser = OptionParser.new do |opts|
  opts.banner =   "Usage: ./yummy (posts|tags|dates|backup) [OPTIONS]"
  opts.separator  ""
  opts.separator  "OPTIONS"

  opts.on("-t", "--tags tag1+tag2+...", "Set list of tags (separated by '+') for posts") do |d|
    options[:tags] = d
  end

  opts.on("-n", "--max MAX", "Set maximum number of tags/posts") do |d|
    options[:max] = d.to_i
  end

  opts.on("-s", "--start-date START_DATE", "Set start date for all API requests") do |d|
    options[:start] = Date.parse(d).strftime("%FT%TZ")
  end

  opts.on("-e", "--end-date END_DATE", "Set end date for all API requests") do |d|
    options[:end] = Date.parse(d).strftime("%FT%TZ")
  end

  opts.on("-h", "--help", "Display this information") do
    puts opt_parser
    exit 0
  end

  opts.separator  ""
  opts.separator  "** All dates must be provided in the format `YYYY-MM-DD'"
  opts.separator  ""
  opts.separator  "EXAMPLES"
  opts.separator  "# Get list of 100 recent posts for tag 'ruby'"
  opts.separator  "./yummy posts -t ruby -n 100"
  opts.separator  ""
  opts.separator  "# Get list of tags with most posts"
  opts.separator  "./yummy tags"
  opts.separator  ""
  opts.separator  "# Get list of dates and post counts"
  opts.separator  "./yummy dates"
  opts.separator  ""
  opts.separator  "# Save backup of all posts"
  opts.separator  "./yummy backup"
  opts.separator  ""
end
opt_parser.parse!

# Get user command
command = ARGV[0]

case command
when "backup"
  options[:object] = "backup"
when "dates"
  options[:object] = "dates"
when "tags"
  options[:object] = "tags"
when "posts"
  options[:object] = "posts"
else
  puts "yummy: don't know how to `#{command}'"
  exit -1
end

# Greet user
puts "Hello, Yummy! You're just looking delicious ..."
puts

# Load ACCESS_TOKEN
config = begin
  YAML.load(File.open("config.yml"))
rescue ArgumentError => e
  puts "Could not parse YAML: #{e.message}"
end

# Initialize DeliciousAPI wrapper
delicious = DeliciousAPI.new(config['ACCESS_TOKEN'])

# Initialize service
service = ServiceFactory.build(options[:object], delicious, options)

# Execute service
manager = ServiceManager.new(service)
manager.execute